{"version":3,"sources":["webpack://turnmarker-alt/./src/scripts/chatter.js","webpack://turnmarker-alt/./src/scripts/marker.js","webpack://turnmarker-alt/./src/scripts/markeranimation.js","webpack://turnmarker-alt/./src/scripts/settings.js","webpack://turnmarker-alt/./src/scripts/settingsForm.js","webpack://turnmarker-alt/./src/scripts/turnmarker.js","webpack://turnmarker-alt/./src/scripts/updateWindow.js","webpack://turnmarker-alt/./src/scripts/utils.js","webpack://turnmarker-alt/webpack/bootstrap","webpack://turnmarker-alt/webpack/runtime/define property getters","webpack://turnmarker-alt/webpack/runtime/hasOwnProperty shorthand","webpack://turnmarker-alt/webpack/runtime/make namespace object","webpack://turnmarker-alt/webpack/startup"],"names":["Chatter","combatant","hideNPC_name","announceLabel","game","i18n","localize","announceText","playerNameDisplay","combatantName","actor","name","aliasName","Settings","token","players","forEach","player","push","length","join","hasPlayerOwner","ChatMessage","create","speaker","alias","content","this","placeImage","img","flags","core","thumb","Marker","to_delete","canvas","scene","getEmbeddedCollection","filter","tile","turnMarker","map","_id","user","isGM","deleteEmbeddedEntity","socket","emit","socketName","mode","socketAction","tileData","data","deckMarker","tokenId","markerId","moveMarkerToToken","deleteTurnMarker","findTokenById","dims","getImageDimensions","center","getImageLocation","newTile","Tile","width","w","height","h","x","y","z","rotation","hidden","locked","createEmbeddedEntity","deleteOnDeckMarker","startMarker","unsetFlag","FlagScope","Flags","deleteStartMarker","setFlag","marker_type","updateEmbeddedEntity","tiles","placeables","find","t","id","MarkerAnimation","clearAllMarkers","ignoreRatio","ratio","newWidth","newHeight","grid","type","getSmallerDimension","newX","newY","animators","animateRotation","bind","app","ticker","add","remove","key","value","Object","entries","dt","delta","err","version","interval","announce","announceActors","announceImage","announceTokenName","announceTurnMarkerAlias","announcePlayerNames","image","customimage","turnMarkerEnabled","animation","onDeckMarkerEnabled","deckImage","customDeckImage","deckRatio","deckAnimation","deckPlayersOnly","startMarkerEnabled","startMarkerImage","imageTitles","deckImageTitles","announcedActorOptions","settings","get","modName","val","set","trim","getImageByIndex","getDeckImageByIndex","index","image_type","registerMenu","label","icon","SettingsForm","restricted","register","default","String","scope","hint","config","Number","Boolean","onChange","shouldAnimate","paused","choices","enabled","combat","started","nextTurn","getNextTurn","turns","videos","FormApplication","object","options","super","mergeObject","defaultOptions","title","template","classes","closeOnSubmit","getSelectList","customImage","previewPath","onDeckPreviewPath","onDeckPlayersOnly","startMarkerPath","e","d","console","log","html","activateListeners","markerSelect","markerImgPreview","onDeckMarkerSelect","deckMarkerImgPreview","updatePreview","on","event","attr","target","_updateTurnmarkerPreview","_updateOnDeckmarkerPreview","markerVideoPreview","disabled","removeClass","addClass","ext","getExtension","warn","includes","toLowerCase","deckMarkerVideoPreview","filePath","slice","lastIndexOf","array","selected","i","lastTurn","isVisible","sight","tokenVision","_controlled","tokens","tolerance","Math","min","testVisibility","async","handleCombatUpdate","update","userId","firstGM","then","createCombatDeckMarker","undefined","Hooks","once","isNewerVersion","modules","renderUpdateWindow","deckTile","zIndex","max","o","parent","sortChildren","renderable","system","combatTracker","updateToken","updateData","turn","nextToken","entity","isPaused","module","UpdateWindow","Application","resizable","ev","currentTarget","checked","oldVersion","render","startMarkerPlaced","placeStartMarker","ownedTokens","users","entities","role","active","__webpack_module_cache__","__webpack_require__","moduleId","exports","__webpack_modules__","definition","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag"],"mappings":"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","file":"turnmarker.js","sourcesContent":["import { Settings } from \"./settings.js\";\n\nexport class Chatter {\n\n    static sendTurnMessage(combatant, hideNPC_name=false) {\n        const announceLabel = game.i18n.localize(\"tm.announceLabel\");\n        let combatantName = combatant.actor.name;\n        let aliasName = combatantName;\n        if (Settings.getAnnounceTokenName()) {\n            combatantName = combatant.token.name;\n            aliasName = combatant.name;\n        }\n\n        let announceText;\n        if (Settings.getAnnounceTurnMarkerAlias()) {\n            aliasName = announceLabel;\n            announceText = \"\";\n        } else {\n            announceText = `<em>${announceLabel}</em>`;\n        }\n\n        let playerNameDisplay;\n        if (Settings.getAnnouncePlayerNames()) {\n          let players = [];\n          combatant.players.forEach(player => {\n              players.push(player.name);\n          });\n          if (players.length == 0) players.push(\"GM\");\n          playerNameDisplay = `<p>${players.join(' - ')}</p>`;\n        } else {\n          playerNameDisplay = \"\";\n        }\n\n        if (hideNPC_name && !combatant.actor.hasPlayerOwner) {\n            combatantName = \"???\";\n        }\n\n        ChatMessage.create({\n            speaker: { actor: combatant.actor, alias: aliasName },\n            //speaker: { actor: {}, alias: 'Turn Marker' },\n            content:\n                `<div class=\"flexrow\">${this.placeImage(combatant)}\n                    <div style=\"flex: 12;\">\n                        <h2>${combatantName}'s Turn</h2>\n                        ${playerNameDisplay}\n                    </div>\n                    </div>${announceText}`\n        });\n    }\n\n    static placeImage(combatant) {\n        if (Settings.getIncludeAnnounceImage()) {\n            let img = combatant.img;\n            if (combatant.flags.core && combatant.flags.core.thumb) {\n                img = combatant.flags.core.thumb;\n            }\n            return `<div style=\"flex:3;padding-right:4px\"><img src=\"${img}\" style=\"border: none;\" /></div>`;\n            // return `<div style=\"flex:3;\"><video><source=\"${combatant.img}\"></video></div>`;\n        } else return '';\n    }\n}\n","import {MarkerAnimation} from './markeranimation.js';\nimport {Settings} from './settings.js';\nimport {findTokenById, Flags, FlagScope, socketAction, socketName} from './utils.js';\n\n/**\n * Provides functionality for creating, moving, and animating the turn marker\n */\nexport class Marker {\n\n    /**\n     * Deletes any tiles flagged as a 'Turn Marker' from the canvas\n     */\n    static async deleteTurnMarker() {\n        const to_delete = canvas.scene.getEmbeddedCollection('Tile')\n            .filter(tile => tile.flags.turnMarker)\n            .map(tile => tile._id);\n        if (!game.user.isGM) {\n            game.socket.emit(socketName, {\n                mode: socketAction.deleteTurnMarker,\n                tileData: to_delete.data\n            });\n        } else {\n            await canvas.scene.deleteEmbeddedEntity('Tile', to_delete);\n        }\n    }\n\n    /**\n     * Deletes any tiles flagged as a 'Deck Marker' from the canvas\n     */\n    static async deleteOnDeckMarker() {\n        const to_delete = canvas.scene.getEmbeddedCollection('Tile')\n            .filter(tile => tile.flags.deckMarker)\n            .map(tile => tile._id);\n        if (!game.user.isGM) {\n            game.socket.emit(socketName, {\n                mode: socketAction.deleteOnDeckMarker,\n                tileData: to_delete.data\n            });\n        } else {\n            await canvas.scene.deleteEmbeddedEntity('Tile', to_delete);\n        }\n    }\n\n    /**\n     * Places a new turn marker under the token specified, and if required, starts the animation\n     * @param {String} tokenId - The ID of the token where the marker should be placed\n     * @param {Object} animator - The animator object\n     * @param {String} markerId - The ID of the tile being used as the turn marker\n     */\n    static async placeTurnMarker(tokenId, markerId) {\n        if (!markerId) {\n            await this.deleteTurnMarker();\n\n            if (Settings.getIsEnabled(\"turnmarker\")) {\n                let token = findTokenById(tokenId);\n                let dims = this.getImageDimensions(token, false, \"turnmarker\");\n                let center = this.getImageLocation(token, false, \"turnmarker\");\n\n                let newTile = new Tile({\n                    img: Settings.getImagePath(),\n                    width: dims.w,\n                    height: dims.h,\n                    x: center.x,\n                    y: center.y,\n                    z: 900,\n                    rotation: 0,\n                    hidden: token.data.hidden,\n                    locked: false,\n                    flags: {turnMarker: true}\n                });\n\n                let tile = await canvas.scene.createEmbeddedEntity('Tile', newTile.data);\n\n                return tile._id;\n            } else {\n                return null;\n            }\n        } else {\n            await this.moveMarkerToToken(tokenId, markerId, \"turnmarker\");\n            return markerId;\n        }\n    }\n\n    static async placeOnDeckMarker(tokenId) {\n        await this.deleteOnDeckMarker();\n\n        if (Settings.getIsEnabled(\"deckmarker\")) {\n            let token = findTokenById(tokenId);\n            let dims = this.getImageDimensions(token, false, \"deckmarker\");\n            let center = this.getImageLocation(token, false, \"deckmarker\");\n            let newTile = new Tile({\n                img: Settings.getOnDeckImagePath(),\n                width: dims.w,\n                height: dims.h,\n                x: center.x,\n                y: center.y,\n                z: 900,\n                rotation: 0,\n                hidden: token.data.hidden,\n                locked: false,\n                flags: {deckMarker: true}\n            });\n\n            if (game.user.isGM) {\n                await canvas.scene.createEmbeddedEntity('Tile', newTile.data);\n            }\n        }\n    }\n\n\n    /**\n     * Deletes any tiles flagged as a 'Start Marker' from the canvas\n     */\n    static async deleteStartMarker() {\n        const to_delete = canvas.scene.getEmbeddedCollection('Tile')\n            .filter(tile => tile.flags.startMarker)\n            .map(tile => tile._id);\n        if (!game.user.isGM) {\n            game.socket.emit(socketName, {\n                mode: socketAction.deleteStartMarker,\n                tileData: to_delete.data\n            });\n        } else {\n            await canvas.scene.unsetFlag(FlagScope, Flags.startMarkerPlaced);\n            await canvas.scene.deleteEmbeddedEntity('Tile', to_delete);\n        }\n    }\n\n    /**\n     * If enabled in settings, place a \"start\" marker under the token where their turn started.\n     * @param {String} tokenId - The ID of the token to place the start marker under\n     */\n    static async placeStartMarker(tokenId) {\n        await this.deleteStartMarker();\n\n        if (Settings.getIsEnabled(\"startmarker\")) {\n            let token = findTokenById(tokenId);\n            let dims = this.getImageDimensions(token);\n            let center = this.getImageLocation(token);\n            let newTile = new Tile({\n                img: Settings.getStartMarker(),\n                width: dims.w,\n                height: dims.h,\n                x: center.x,\n                y: center.y,\n                z: 900,\n                rotation: 0,\n                hidden: token.data.hidden,\n                locked: false,\n                flags: {startMarker: true}\n            });\n\n            if (game.user.isGM) {\n                await canvas.scene.createEmbeddedEntity('Tile', newTile.data);\n                await canvas.scene.setFlag(FlagScope, Flags.startMarkerPlaced, true);\n            }\n        }\n    }\n\n    /**\n     * Moves the turn marker tile under the specified token\n     * @param {String} tokenId - The ID of the token that the marker should be placed under\n     * @param {String} markerId - The ID of the tile currently serving as the turn marker\n     */\n    static async moveMarkerToToken(tokenId, markerId, marker_type=\"turnmarker\") {\n        let token = findTokenById(tokenId);\n        let dims = this.getImageDimensions(token, false, marker_type);\n        let center = this.getImageLocation(token, false, marker_type);\n\n        await canvas.scene.updateEmbeddedEntity('Tile', {\n            _id: markerId,\n            width: dims.w,\n            height: dims.h,\n            x: center.x,\n            y: center.y,\n            hidden: token.data.hidden\n        });\n    }\n\n    /**\n     * Removes any existing turn marker and start marker tiles from the canvas\n     */\n    static async clearAllMarkers() {\n        await this.deleteTurnMarker();\n        await this.deleteStartMarker();\n        await this.deleteOnDeckMarker();\n    }\n\n    /**\n     * Updates the tile image when the image path has changed\n     */\n    static async updateImagePath() {\n        if (game.user.isGM) {\n            let tile = canvas.tiles.placeables.find(t => t.data.flags.turnMarker == true);\n            if (tile) {\n                await canvas.scene.updateEmbeddedEntity('Tile', {\n                    _id: tile.id,\n                    img: Settings.getImagePath()\n                });\n            }\n        }\n    }\n\n    /**\n     * Updates the tile image when the image path has changed\n     */\n    static async updateOnDeckImagePath() {\n        if (game.user.isGM) {\n            let tile = canvas.tiles.placeables.find(t => t.data.flags.deckMarker == true);\n            if (tile) {\n                await canvas.scene.updateEmbeddedEntity('Tile', {\n                    _id: tile.id,\n                    img: Settings.getOnDeckImagePath()\n                });\n            }\n        }\n    }\n\n    /**\n     * Completely resets the turn marker - deletes all tiles and stops any animation\n     */\n    static async reset() {\n        MarkerAnimation.stopAllAnimation();\n        await this.clearAllMarkers();\n    }\n\n    /**\n     * Gets the proper dimensions of the marker tile taking into account the current grid layout\n     * @param {object} token - The token that the tile should be placed under\n     */\n    static getImageDimensions(token, ignoreRatio = false, marker_type = \"turnmarker\") {\n        let ratio = ignoreRatio ? 1 : Settings.getRatio(marker_type);\n        let newWidth = 0;\n        let newHeight = 0;\n\n        switch (canvas.grid.type) {\n            case 2:\n            case 3: // Hex Rows\n                newWidth = newHeight = token.h * ratio;\n                break;\n            case 4:\n            case 5: // Hex Columns\n                newWidth = newHeight = token.w * ratio;\n                break;\n            default: // Gridless and Square\n                newWidth = this.getSmallerDimension(token.w, token.h) * ratio;\n                newHeight = this.getSmallerDimension(token.w, token.h) * ratio;\n                break;\n        }\n\n        return {w: newWidth, h: newHeight};\n    }\n\n    /**\n     * Returns the smaller dimension, so we can prevent lopsided markers when we have larger tokens on square/gridless\n     * @param width\n     * @param height\n     * @returns {*}\n     */\n    static getSmallerDimension(width, height) {\n        return width < height ? width : height;\n    }\n\n    /**\n     * Gets the proper location of the marker tile taking into account the current grid layout\n     * @param {object} token - The token that the tile should be placed under\n     */\n    static getImageLocation(token, ignoreRatio = false, marker_type = \"turnmarker\") {\n        let ratio = ignoreRatio ? 1 : Settings.getRatio(marker_type);\n        let newX = 0;\n        let newY = 0;\n\n        switch (canvas.grid.type) {\n            case 2:\n            case 3: // Hex Rows\n                newX = token.center.x - ((token.h * ratio) / 2);\n                newY = token.center.y - ((token.h * ratio) / 2);\n                break;\n            case 4:\n            case 5: // Hex Columns\n                newX = token.center.x - ((token.w * ratio) / 2);\n                newY = token.center.y - ((token.w * ratio) / 2);\n                break;\n            default: // Gridless and Square\n                newX = token.center.x - ((this.getSmallerDimension(token.w, token.h) * ratio) / 2);\n                newY = token.center.y - ((this.getSmallerDimension(token.w, token.h) * ratio) / 2);\n        }\n\n        return {x: newX, y: newY};\n    }\n}","import {Settings} from './settings.js';\n\nexport class MarkerAnimation {\n    /**\n     * Starts the animation loop\n     */\n\n    static startAnimation(marker_type = \"turnmarker\") {\n        if (!this.animators) {\n            this.animators = {};\n        }\n        if (marker_type in this.animators) {\n            return this.animators[marker_type];\n        }\n        this.animators[marker_type] = this.animateRotation.bind(this, marker_type);\n        canvas.app.ticker.add(this.animators[marker_type]);\n        return this.animators;\n    }\n\n    /**\n     * Stops the animation loop\n     */\n    static stopAnimation(marker_type = \"turnmarker\") {\n        if (this.animators) {\n            canvas.app.ticker.remove(this.animators[marker_type]);\n            delete this.animators[marker_type];\n        }\n    }\n\n    static stopAllAnimation() {\n        for (const [key, value] of Object.entries(this.animators)) {\n            canvas.app.ticker.remove(this.animators[key]);\n        }\n        this.animators = {};\n    }\n\n    /**\n     * Called on every tick of the animation loop to rotate the image based on the current frame\n     * @param {string} marker_type - type of marker to animate\n     * @param {number} dt - The delta time\n     */\n    static animateRotation(marker_type, dt) {\n        let tile;\n        switch (marker_type) {\n            case \"turnmarker\":\n                tile = canvas.tiles.placeables.find(t => t.data.flags.turnMarker == true);\n                break;\n            case \"deckmarker\":\n                tile = canvas.tiles.placeables.find(t => t.data.flags.deckMarker == true);\n                break;\n            default:\n                tile = canvas.tiles.placeables.find(t => t.data.flags.turnMarker == true);\n        }\n\n        if (tile && tile.data.img) {\n            let delta = Settings.getInterval() / 10000;\n            try {\n                tile.tile.img.rotation += (delta * dt);\n            } catch (err) {\n                // skip lost frames if the tile is being updated by the server\n            }\n        }\n    }\n}","import {Marker} from './marker.js';\nimport {MarkerAnimation} from './markeranimation.js';\nimport {SettingsForm} from './settingsForm.js';\nimport {modName, getNextTurn} from './utils.js';\n\nconst version = 'tm-version';\nconst interval = 'interval';\nconst announce = 'announce-turn';\nconst announceActors = 'announce-Actors';\nconst announceAsActor = 'announce-asActor';\nconst announceImage = 'announce-image';\nconst announceTokenName = 'announce-token';\nconst announceTurnMarkerAlias = 'announce-turn-marker-alias';\nconst announcePlayerNames = 'announce-player-names';\n\n// Turn marker constants\nconst image = 'image';\nconst customimage = 'customimage';\nconst ratio = 'ratio';\nconst turnMarkerEnabled = 'turnmarker-enabled';\nconst animation = 'animation';\n\n// Ondeck marker constants\nconst onDeckMarkerEnabled = 'ondeckmarker-enabled';\nconst deckImage = 'deckimage';\nconst customDeckImage = 'customdeckimage';\nconst deckRatio = 'deckratio';\nconst deckAnimation = 'deckanimation';\nconst deckPlayersOnly = 'deckplayersonly';\n\nconst startMarkerEnabled = 'startMarker-enabled';\nconst startMarkerImage = 'startMarker-custom';\nexport const imageTitles = [\n    'Runes of Incendium by Rin',\n    'Runes of the Cultist by Rin',\n    'Runes of Regeneration by Rin',\n    'Runes of the Cosmos by Rin',\n    'Runes of Earthly Dust by Rin',\n    'Runes of Reality by Rin',\n    'Runes of the Believer by Rin',\n    'Runes of the Mad Mage by Rin',\n    'Runes of the Blue Sky by Rin',\n    'Runes of the Universe by Rin',\n    'Runes of Prosperity by Rin'\n];\n\nexport const deckImageTitles = [\n    'Runes of Prosperity by Rin',\n    'Runes of Incendium by Rin',\n    'Runes of the Cultist by Rin',\n    'Runes of Regeneration by Rin',\n    'Runes of the Cosmos by Rin',\n    'Runes of Earthly Dust by Rin',\n    'Runes of Reality by Rin',\n    'Runes of the Believer by Rin',\n    'Runes of the Mad Mage by Rin',\n    'Runes of the Blue Sky by Rin',\n    'Runes of the Universe by Rin'\n];\n\nexport const announcedActorOptions = [\n    'Announce for all',\n    'Announce for players',\n    'Announce for GM-controlled',\n    'Announce all but hide GM-controlled names'\n];\n\n/**\n * Provides functionality for reading and writing module settings\n */\nexport class Settings {\n\n    static getVersion() {\n        return game.settings.get(modName, version);\n    }\n\n    static setVersion(val) {\n        game.settings.set(modName, version, val);\n    }\n\n    /**\n     * Gets the image ratio given a marker_type\n     */\n    static getRatio(marker_type) {\n        switch (marker_type) {\n            case \"turnmarker\":\n                return game.settings.get(modName, ratio);\n            case \"deckmarker\":\n                return game.settings.get(modName, deckRatio);\n        }\n    }\n\n    /**\n     * Sets the turn marker image ratio\n     * @param {Number} val - The image ratio\n     */\n    static setRatio(val) {\n        game.settings.set(modName, ratio, val);\n    }\n\n    /**\n     * Sets the ondeck image ratio\n     * @param {Number} val - The image ratio\n     */\n    static setDeckRatio(val) {\n        game.settings.set(modName, deckRatio, val);\n    }\n\n    /**\n     * Returns true if the marker should be animated\n     */\n    static getShouldAnimate(marker_type) {\n        switch (marker_type) {\n            case \"turnmarker\":\n                return game.settings.get(modName, animation);\n            case \"deckmarker\":\n                return game.settings.get(modName, deckAnimation);\n        }\n\n    }\n\n    /**\n     * Gets the animation interval in ms.\n     */\n    static getInterval() {\n        return game.settings.get(modName, interval);\n    }\n\n    /**\n     * Returns true if turn changes should be announced in chat\n     */\n    static shouldAnnounceTurns() {\n        return game.settings.get(modName, announce);\n    }\n\n    /**\n     * Sets whether or not to announce turn changes\n     * @param {Boolean} val - Whether or not to announce turn changes\n     */\n    static setShouldAnnounceTurns(val) {\n        game.settings.set(modName, announce, val);\n    }\n\n\n    /**\n     * Gets index of setting\n     * @returns {Number} - Index number of announced\n     */\n    static getAnnounceActors() {\n        return game.settings.get(modName, announceActors);\n    }\n\n    /**\n     * Sets who sees announced turn changes\n     * @param announceActors - which owners get units announcedActorOptions, which is selected.\n     */\n    static setAnnounceActors(val) {\n        return game.settings.set(modName, announceActors, val);\n    }\n\n    static getAnnounceTokenName() {\n        return game.settings.get(modName, announceTokenName);\n    }\n\n    static setAnnounceTokenName(val) {\n        return game.settings.set(modName, announceTokenName, val);\n    }\n\n    static getAnnounceTurnMarkerAlias() {\n        return game.settings.get(modName, announceTurnMarkerAlias);\n    }\n\n    static setAnnounceTurnMarkerAlias(val) {\n        return game.settings.set(modName, announceTurnMarkerAlias, val);\n    }\n\n    static getAnnouncePlayerNames() {\n        return game.settings.get(modName, announcePlayerNames);\n    }\n\n    static setAnnouncePlayerNames(val) {\n        return game.settings.set(modName, announcePlayerNames, val);\n    }\n    static getIncludeAnnounceImage() {\n        return game.settings.get(modName, announceImage);\n    }\n\n    static setIncludeAnnounceImage(val) {\n        game.settings.set(modName, announceImage, val);\n    }\n\n    /**\n     * Gets the index of the currently selected marker image\n     * @param {string} marker_type - Type of marker to get index for\n     */\n    static getImageIndex(marker_type) {\n        switch (marker_type) {\n            case \"turnmarker\":\n                return game.settings.get(modName, image);\n            case \"deckmarker\":\n                return game.settings.get(modName, deckImage);\n        }\n    }\n\n    static getStartMarker() {\n        if (game.settings.get(modName, startMarkerImage).trim() == '') {\n            return 'modules/turnmarker/assets/start.png';\n        } else {\n            return game.settings.get(modName, startMarkerImage);\n        }\n    }\n\n    /**\n     * Gets the IsEnabled property of passed marker_type\n     * @param marker_type - Type of marker to check isEnabled\n     */\n    static getIsEnabled(marker_type) {\n        switch (marker_type) {\n            case \"turnmarker\":\n                return game.settings.get(modName, turnMarkerEnabled);\n            case \"deckmarker\":\n                return game.settings.get(modName, onDeckMarkerEnabled);\n            case \"startmarker\":\n                return game.settings.get(modName, startMarkerEnabled);\n        }\n    }\n\n    /**\n     * Sets the IsEnabled property of passed marker_type\n     * @param marker_type - Type of marker to check isEnabled\n     * @param val - boolean\n     */\n    static setIsEnabled(marker_type, val) {\n        switch (marker_type) {\n            case \"turnmarker\":\n                game.settings.set(modName, turnMarkerEnabled, val);\n                break;\n            case \"deckmarker\":\n                game.settings.set(modName, onDeckMarkerEnabled, val);\n                break;\n            case \"startmarker\":\n                game.settings.set(modName, startMarkerEnabled, val);\n                break;\n        }\n    }\n\n    static getStartMarkerPath() {\n        return game.settings.get(modName, startMarkerImage);\n    }\n\n    static setStartMarkerPath(val) {\n        game.settings.set(modName, startMarkerImage, val);\n    }\n\n    /**\n     * Gets a path to the currently selected image to be used as the marker\n     */\n    static getImagePath() {\n        if (game.settings.get(modName, customimage).trim() == '') {\n            return this.getImageByIndex(game.settings.get(modName, image));\n        } else {\n            return game.settings.get(modName, customimage);\n        }\n    }\n\n    /**\n     * Gets a path to the currently selected image to be used as the onDeck marker\n     */\n    static getOnDeckImagePath() {\n        if (game.settings.get(modName, customDeckImage).trim() == '') {\n            return this.getDeckImageByIndex(game.settings.get(modName, deckImage));\n        } else {\n            return game.settings.get(modName, customDeckImage);\n        }\n    }\n\n    static getImageByIndex(index) {\n        switch (index) {\n            case 0:\n                return 'modules/turnmarker/assets/incendium.png';\n            case 1:\n                return 'modules/turnmarker/assets/cultist.png';\n            case 2:\n                return 'modules/turnmarker/assets/regeneration.png';\n            case 3:\n                return 'modules/turnmarker/assets/cosmos.png';\n            case 4:\n                return 'modules/turnmarker/assets/earthlydust.png';\n            case 5:\n                return 'modules/turnmarker/assets/reality.png';\n            case 6:\n                return 'modules/turnmarker/assets/believer.png';\n            case 7:\n                return 'modules/turnmarker/assets/madmage.png';\n            case 8:\n                return 'modules/turnmarker/assets/bluesky.png';\n            case 9:\n                return 'modules/turnmarker/assets/universe.png';\n            case 10:\n                return 'modules/turnmarker/assets/prosperity.png';\n        }\n    }\n\n    /**\n     * Gets on deck marker image path\n     */\n    static getDeckImageByIndex(index) {\n        switch (index) {\n            case 0:\n                return 'modules/turnmarker/assets/prosperity.png';\n            case 1:\n                return 'modules/turnmarker/assets/incendium.png';\n            case 2:\n                return 'modules/turnmarker/assets/cultist.png';\n            case 3:\n                return 'modules/turnmarker/assets/regeneration.png';\n            case 4:\n                return 'modules/turnmarker/assets/cosmos.png';\n            case 5:\n                return 'modules/turnmarker/assets/earthlydust.png';\n            case 6:\n                return 'modules/turnmarker/assets/reality.png';\n            case 7:\n                return 'modules/turnmarker/assets/believer.png';\n            case 8:\n                return 'modules/turnmarker/assets/madmage.png';\n            case 9:\n                return 'modules/turnmarker/assets/bluesky.png';\n            case 10:\n                return 'modules/turnmarker/assets/universe.png';\n        }\n    }\n\n    static setImage(image_type, val) {\n        switch (image_type) {\n            case \"turnmarker\":\n                game.settings.set(modName, image, val);\n                break;\n            case \"deckmarker\":\n                game.settings.set(modName, deckImage, val);\n                break;\n        }\n\n    }\n\n    static getCustomImagePath() {\n        return game.settings.get(modName, customimage);\n    }\n\n    static setCustomImagePath(val) {\n        game.settings.set(modName, customimage, val);\n    }\n\n    /**\n     * Gets on deck marker image path\n     */\n    static getCustomDeckImagePath() {\n        return game.settings.get(modName, customDeckImage);\n    }\n\n    /**\n     * Sets ondeck marker image path\n     * @param val - path to desired image.\n     */\n    static setCustomDeckImagePath(val) {\n        game.settings.set(modName, customDeckImage, val);\n    }\n\n    /**\n     * Gets if deck markers only used for players\n     */\n    static getDeckPlayersOnly() {\n        return game.settings.get(modName, deckPlayersOnly);\n    }\n\n    /**\n     * Sets if deck markers only used for players\n     * @param val - boolean\n     */\n    static setDeckPlayersOnly(val) {\n        game.settings.set(modName, deckPlayersOnly, val);\n    }\n\n\n    /**\n     * Registers all game settings\n     */\n    static registerSettings() {\n\n        game.settings.registerMenu(modName, 'tm.settingsMenu', {\n            name: 'tm.settings.button.name',\n            label: 'tm.settings.button.label',\n            icon: 'fas fa-sync-alt',\n            type: SettingsForm,\n            restricted: true,\n        });\n\n        game.settings.register(modName, version, {\n            name: `${modName} version`,\n            default: '0.0.0',\n            type: String,\n            scope: 'world',\n        });\n\n        game.settings.register(modName, ratio, {\n            name: 'tm.settings.ratio.name',\n            hint: 'tm.settings.ratio.hint',\n            scope: 'world',\n            config: false,\n            type: Number,\n            default: 1.5,\n            restricted: true\n        });\n\n        game.settings.register(modName, animation, {\n            name: 'tm.settings.animate.name',\n            hint: 'tm.settings.animate.hint',\n            scope: 'user',\n            config: true,\n            type: Boolean,\n            default: true,\n            onChange: shouldAnimate => {\n                if (!game.paused && shouldAnimate && canvas.tiles.placeables.find(t => t.data.flags.turnMarker == true)) {\n                    MarkerAnimation.startAnimation(\"turnmarker\");\n                } else {\n                    MarkerAnimation.stopAnimation(\"turnmarker\");\n                }\n            }\n        });\n\n        game.settings.register(modName, deckAnimation, {\n            name: 'tm.settings.deckAnimate.name',\n            hint: 'tm.settings.deckAnimate.hint',\n            scope: 'user',\n            config: true,\n            type: Boolean,\n            default: true,\n            onChange: shouldAnimate => {\n                if (!game.paused && shouldAnimate && canvas.tiles.placeables.find(t => t.data.flags.deckMarker == true)) {\n                    MarkerAnimation.startAnimation(\"deckmarker\");\n                } else {\n                    MarkerAnimation.stopAnimation(\"deckmarker\");\n                }\n            }\n        });\n\n        game.settings.register(modName, interval, {\n            name: 'tm.settings.interval.name',\n            hint: 'tm.settings.interval.hint',\n            scope: 'user',\n            config: true,\n            type: Number,\n            default: 100\n        });\n\n        game.settings.register(modName, image, {\n            name: 'tm.settings.image.name',\n            scope: 'world',\n            config: false,\n            type: Number,\n            default: 0,\n            choices: imageTitles,\n            restricted: true,\n            onChange: value => Marker.updateImagePath(value)\n        });\n\n        // OnDeck Marker Settings\n        game.settings.register(modName, deckRatio, {\n            name: 'tm.settings.deckRatio.name',\n            hint: 'tm.settings.deckRatio.hint',\n            scope: 'world',\n            config: false,\n            type: Number,\n            default: 1.5,\n            restricted: true\n        });\n\n        game.settings.register(modName, deckImage, {\n            name: 'tm.settings.deckImage.name',\n            scope: 'world',\n            config: false,\n            type: Number,\n            default: 0,\n            choices: deckImageTitles,\n            restricted: true,\n            onChange: value => Marker.updateOnDeckImagePath(value)\n        });\n\n        game.settings.register(modName, customDeckImage, {\n            name: 'tm.settings.customDeckImage.name',\n            hint: 'tm.settings.customDeckImage.hint',\n            scope: 'world',\n            config: false,\n            type: String,\n            default: '',\n            restricted: true,\n            onChange: value => Marker.updateOnDeckImagePath(value)\n        });\n\n        game.settings.register(modName, onDeckMarkerEnabled, {\n            name: 'tm.settings.onDeckMarkerEnabled.name',\n            hint: 'tm.settings.onDeckMarkerEnabled.hint',\n            scope: 'world',\n            config: false,\n            type: Boolean,\n            default: false,\n            restricted: true,\n            onChange: enabled => {\n                if (!enabled) {\n                    Marker.deleteOnDeckMarker();\n                } else if (game.combat && game.combat.combatant && game.combat.started) {\n                    let nextTurn = getNextTurn(game.combat);\n                    Marker.placeOnDeckMarker(game.combat.turns[nextTurn].token._id);\n                }\n            }\n        });\n\n        game.settings.register(modName, deckPlayersOnly, {\n            name: 'tm.settings.deckPlayersOnly.name',\n            hint: 'tm.settings.deckPlayersOnly.hint',\n            scope: 'world',\n            config: false,\n            type: Boolean,\n            default: true,\n            restricted: true,\n        });\n\n        // Announcements\n        game.settings.register(modName, announceActors, {\n            name: 'tm.settings.announcedActors.name',\n            hint: 'tm.settings.announcedActors.hint',\n            scope: 'world',\n            config: false,\n            type: Number,\n            default: 0,\n            restricted: true,\n            choices: announcedActorOptions,\n        });\n\n        game.settings.register(modName, announceTokenName, {\n            name: 'tm.settings.announceTokenName.name',\n            hint: 'tm.settings.announceTokenName.hint',\n            scope: 'world',\n            config: false,\n            type: Boolean,\n            default: false,\n            restricted: true,\n        });\n\n        game.settings.register(modName, announceTurnMarkerAlias, {\n          name: 'tm.settings.announceTurnMarkerAlias.name',\n          hint: 'tm.settings.announceTurnMarkerAlias.hint',\n          scope: 'world',\n          config: false,\n          type: Boolean,\n          default: false,\n          restricted: true,\n        });\n\n        game.settings.register(modName, announcePlayerNames, {\n          name: 'tm.settings.announcePlayerNames.name',\n          hint: 'tm.settings.announcePlayerNames.hint',\n          scope: 'world',\n          config: false,\n          type: Boolean,\n          default: true,\n          restricted: true,\n        });\n\n        game.settings.register(modName, customimage, {\n            name: 'tm.settings.customImage.name',\n            hint: 'tm.settings.customImage.hint',\n            scope: 'world',\n            config: false,\n            type: String,\n            default: '',\n            restricted: true,\n            onChange: value => Marker.updateImagePath(value)\n        });\n\n        game.settings.register(modName, announce, {\n            name: 'tm.settings.announce.name',\n            hint: 'tm.settings.announce.hint',\n            scope: 'world',\n            config: false,\n            type: Boolean,\n            default: true\n        });\n\n        game.settings.register(modName, announceImage, {\n            name: 'tm.settings.announceImage.name',\n            hint: 'tm.settings.announceImage.hint',\n            scope: 'world',\n            config: false,\n            type: Boolean,\n            default: true\n        });\n\n        game.settings.register(modName, announceAsActor, {\n            name: 'tm.settings.announceAs.name',\n            hint: 'tm.settings.announceAs.hint',\n            scope: 'world',\n            config: false,\n            type: Boolean,\n            default: true\n        });\n\n        game.settings.register(modName, turnMarkerEnabled, {\n            name: 'tm.settings.turnMarkerEnabled.name',\n            hint: 'tm.settings.turnMarkerEnabled.hint',\n            scope: 'world',\n            config: false,\n            type: Boolean,\n            default: true,\n            restricted: true,\n            onChange: enabled => {\n                if (!enabled) {\n                    Marker.deleteTurnMarker();\n                } else if (game.combat && game.combat.combatant && game.combat.started) {\n                    Marker.placeTurnMarker(game.combat.combatant.token._id);\n                }\n            }\n        });\n\n        game.settings.register(modName, startMarkerEnabled, {\n            name: 'tm.settings.startEnabled.name',\n            hint: 'tm.settings.startEnabled.hint',\n            scope: 'world',\n            config: false,\n            type: Boolean,\n            default: false,\n            restricted: true,\n            onChange: enabled => {\n                if (!enabled) {\n                    Marker.deleteStartMarker();\n                } else if (game.combat && game.combat.combatant && game.combat.started) {\n                    Marker.placeStartMarker(game.combat.combatant.token._id);\n                }\n            }\n        });\n\n        game.settings.register(modName, startMarkerImage, {\n            name: 'tm.settings.startImage.name',\n            hint: 'tm.settings.startImage.hint',\n            scope: 'world',\n            config: false,\n            type: String,\n            default: '',\n            restricted: true\n        });\n    }\n}\n","import {imageTitles, deckImageTitles, announcedActorOptions, Settings} from './settings.js';\n\nconst videos = ['mp4', 'webm', 'ogg'];\n\nexport class SettingsForm extends FormApplication {\n\n    constructor(object, options = {}) {\n        super(object, options);\n    }\n\n    /**\n     * Default Options for this FormApplication\n     */\n    static get defaultOptions() {\n        return mergeObject(super.defaultOptions, {\n            id: 'turnmarker-settings-form',\n            title: 'Turn Marker - Global Settings',\n            template: './modules/turnmarker/templates/settings.html',\n            classes: ['sheet', 'tm-settings'],\n            width: 500,\n            closeOnSubmit: true\n        });\n    }\n\n    getData() {\n        return {\n            turnMarkerEnabled: Settings.getIsEnabled(\"turnmarker\"),\n            ratio: Settings.getRatio(\"turnmarker\"),\n            image: this.getSelectList(imageTitles, Settings.getImageIndex(\"turnmarker\")),\n            customImage: Settings.getCustomImagePath(),\n            previewPath: Settings.getImagePath(),\n            // onDeck Marker Settings\n            onDeckMarkerEnabled: Settings.getIsEnabled(\"deckmarker\"),\n            deckRatio: Settings.getRatio(\"deckmarker\"),\n            deckImage: this.getSelectList(deckImageTitles, Settings.getImageIndex(\"deckmarker\")),\n            customDeckImage: Settings.getCustomDeckImagePath(),\n            onDeckPreviewPath: Settings.getOnDeckImagePath(),\n            onDeckPlayersOnly: Settings.getDeckPlayersOnly(),\n            // Announcement Settings\n            announceActors: this.getSelectList(announcedActorOptions, Settings.getAnnounceActors()),\n            announce: Settings.shouldAnnounceTurns(),\n            announceImage: Settings.getIncludeAnnounceImage(),\n            announceTokenName: Settings.getAnnounceTokenName(),\n            announceTurnMarkerAlias: Settings.getAnnounceTurnMarkerAlias(),\n            announcePlayerNames: Settings.getAnnouncePlayerNames(),\n            // Start Marker Settings\n            startMarkerEnabled: Settings.getIsEnabled(\"startmarker\"),\n            startMarkerPath: Settings.getStartMarkerPath()\n        };\n    }\n\n    /**\n     * Executes on form submission.\n     * @param {Object} e - the form submission event\n     * @param {Object} d - the form data\n     */\n    async _updateObject(e, d) {\n        console.log('Turn Marker | Saving Settings');\n        // Turnmarker settings\n        Settings.setRatio(d.ratio);\n        if (d.image) Settings.setImage(\"turnmarker\", d.image);\n        Settings.setCustomImagePath(d.customImage);\n        Settings.setIsEnabled(\"turnmarker\", d.turnMarkerEnabled);\n\n        // Announcement Settings\n        Settings.setShouldAnnounceTurns(d.announce);\n        Settings.setAnnounceActors(d.announceActors);\n        Settings.setIncludeAnnounceImage(d.announceImage);\n        Settings.setAnnounceTokenName(d.announceTokenName);\n        Settings.setAnnounceTurnMarkerAlias(d.announceTurnMarkerAlias);\n        Settings.setAnnouncePlayerNames(d.announcePlayerNames);\n        Settings.setIsEnabled(\"startmarker\", d.startMarkerEnabled);\n        Settings.setStartMarkerPath(d.startMarkerPath);\n\n        // Ondeck Marker Settings\n        Settings.setDeckRatio(d.deckRatio);\n        if (d.deckImage) Settings.setImage(\"deckmarker\", d.deckImage);\n        Settings.setCustomDeckImagePath(d.customDeckImage);\n        Settings.setIsEnabled(\"deckmarker\", d.onDeckMarkerEnabled);\n        Settings.setDeckPlayersOnly(d.onDeckPlayersOnly);\n    }\n\n    activateListeners(html) {\n        super.activateListeners(html);\n        const markerSelect = html.find('#image');\n        const customImage = html.find('#customImage');\n        const markerImgPreview = html.find('#markerImgPreview');\n\n        const onDeckMarkerSelect = html.find('#deckImage');\n        const customDeckImage = html.find('#customDeckImage');\n        const deckMarkerImgPreview = html.find('#onDeckMarkerImgPreview');\n\n        this.updatePreview(html);\n\n        if (markerSelect.length > 0) {\n            markerSelect.on('change', event => {\n                if (customImage[0].value.trim() == '') {\n                    markerImgPreview.attr('src', Settings.getImageByIndex(Number(event.target.value)));\n                }\n            });\n        }\n\n        if (onDeckMarkerSelect.length > 0) {\n            onDeckMarkerSelect.on('change', event => {\n                if (customDeckImage[0].value.trim() == '') {\n                    deckMarkerImgPreview.attr('src', Settings.getDeckImageByIndex(Number(event.target.value)));\n                }\n            });\n        }\n\n        if (customImage.length > 0) {\n            customImage.on('change', event => {\n                this.updatePreview(html);\n            });\n        }\n\n        if (customDeckImage.length > 0) {\n            customDeckImage.on('change', event => {\n                this.updatePreview(html);\n            });\n        }\n    }\n\n    updatePreview(html) {\n        this._updateTurnmarkerPreview(html);\n        this._updateOnDeckmarkerPreview(html);\n    }\n\n    /**\n     Updates turnmarker preview\n     **/\n    _updateTurnmarkerPreview(html) {\n        const markerSelect = html.find('#image');\n        const customImage = html.find('#customImage');\n        const markerImgPreview = html.find('#markerImgPreview');\n        const markerVideoPreview = html.find('#markerVideoPreview');\n\n        if (customImage[0].value.trim() == '') {\n            markerSelect[0].disabled = false;\n            markerImgPreview.attr('src', Settings.getImageByIndex(Number(markerSelect[0].value)));\n            markerImgPreview.removeClass('hidden');\n            markerVideoPreview.addClass('hidden');\n        } else {\n            markerSelect[0].disabled = true;\n            const ext = this.getExtension(customImage[0].value);\n            console.warn(ext);\n            if (videos.includes(ext.toLowerCase())) {\n                markerVideoPreview.attr('src', customImage[0].value);\n                markerImgPreview.addClass('hidden');\n                markerVideoPreview.removeClass('hidden');\n            } else {\n                markerImgPreview.attr('src', customImage[0].value);\n                markerImgPreview.removeClass('hidden');\n                markerVideoPreview.addClass('hidden');\n            }\n        }\n    }\n\n    _updateOnDeckmarkerPreview(html) {\n        const onDeckMarkerSelect = html.find('#deckImage');\n        const customDeckImage = html.find('#customDeckImage');\n        const deckMarkerImgPreview = html.find('#onDeckMarkerImgPreview');\n        const deckMarkerVideoPreview = html.find('#onDeckMarkerVideoPreview');\n\n        if (customDeckImage[0].value.trim() == '') {\n            onDeckMarkerSelect[0].disabled = false;\n            deckMarkerImgPreview.attr('src', Settings.getDeckImageByIndex(Number(onDeckMarkerSelect[0].value)));\n            deckMarkerImgPreview.removeClass('hidden');\n            deckMarkerVideoPreview.addClass('hidden');\n        } else {\n            onDeckMarkerSelect[0].disabled = true;\n            const ext = this.getExtension(customDeckImage[0].value);\n            console.warn(ext);\n            if (videos.includes(ext.toLowerCase())) {\n                deckMarkerVideoPreview.attr('src', customDeckImage[0].value);\n                deckMarkerImgPreview.addClass('hidden');\n                deckMarkerVideoPreview.removeClass('hidden');\n            } else {\n                deckMarkerImgPreview.attr('src', customDeckImage[0].value);\n                deckMarkerImgPreview.removeClass('hidden');\n                deckMarkerVideoPreview.addClass('hidden');\n            }\n        }\n    }\n\n    getExtension(filePath) {\n        return filePath.slice((filePath.lastIndexOf(\".\") - 1 >>> 0) + 2);\n    }\n\n    getSelectList(array, selected) {\n        let options = [];\n        array.forEach((x, i) => {\n            options.push({value: x, selected: i == selected});\n        });\n        return options;\n    }\n}\n","import {Chatter} from './chatter.js';\nimport {Marker} from './marker.js';\nimport {MarkerAnimation} from './markeranimation.js';\nimport {Settings} from './settings.js';\nimport {renderUpdateWindow} from './updateWindow.js';\nimport {firstGM, Flags, FlagScope, socketAction, socketName, getNextTurn} from './utils.js';\n\n\nlet lastTurn = '';\n\nHooks.once('init', () => {\n    Settings.registerSettings();\n});\n\nHooks.once('ready', () => {\n    if (game.user.isGM) {\n        if (isNewerVersion(game.modules.get(\"turnmarker\").data.version, Settings.getVersion())) {\n            renderUpdateWindow();\n        }\n    }\n\n    game.socket.on(socketName, async (data) => {\n        if (game.user.isGM) {\n            if (data) {\n                const to_delete = canvas.tiles.placeables.find(t => t.id === data[0]);\n                switch (data.mode) {\n                    case socketAction.deleteStartMarker:\n                        await canvas.scene.deleteEmbeddedEntity('Tile', to_delete);\n                        canvas.scene.setFlag(FlagScope, Flags.startMarkerPlaced, true);\n                        break;\n                    case socketAction.deleteTurnMarker:\n                        await canvas.scene.deleteEmbeddedEntity('Tile', to_delete);\n                        break;\n                    case socketAction.deleteOnDeckMarker:\n                        await canvas.scene.deleteEmbeddedEntity('Tile', to_delete);\n                        break;\n                }\n\n            }\n        }\n    });\n\n});\n\nHooks.on('canvasReady', () => {\n    let deckTile = canvas.tiles.placeables.find(t => t.data.flags.deckMarker == true);\n    if (deckTile) {\n        deckTile.zIndex = Math.max(...canvas.tiles.placeables.map(o => o.zIndex)) + 1;\n        deckTile.parent.sortChildren();\n        if (!game.paused && Settings.getShouldAnimate(\"deckmarker\")) {\n            MarkerAnimation.startAnimation(\"deckmarker\");\n        }\n    }\n\n    let tile = canvas.tiles.placeables.find(t => t.data.flags.turnMarker == true);\n    if (tile) {\n        tile.zIndex = Math.max(...canvas.tiles.placeables.map(o => o.zIndex)) + 1;\n        tile.parent.sortChildren();\n        if (!game.paused && Settings.getShouldAnimate(\"turnmarker\")) {\n            MarkerAnimation.startAnimation(\"turnmarker\");\n        }\n    }\n});\n\nHooks.on('createTile', (scene, data) => {\n    if (data.flags.turnMarker == true || data.flags.startMarker == true) {\n        const tile = canvas.tiles.placeables.find(t => t.id === data._id);\n        if (tile) {\n            if (data.flags.deckMarker == true) {\n                tile.zIndex = Math.max(...canvas.tiles.placeables.map(o => o.zIndex)) + 1;\n                tile.parent.sortChildren();\n                if (!game.paused && Settings.getShouldAnimate(\"deckmarker\")) {\n                    MarkerAnimation.startAnimation(\"deckmarker\");\n                }\n            }\n            else if (data.flags.turnMarker == true) {\n                tile.zIndex = Math.max(...canvas.tiles.placeables.map(o => o.zIndex)) + 1;\n                tile.parent.sortChildren();\n                if (!game.paused && Settings.getShouldAnimate(\"turnmarker\")) {\n                    MarkerAnimation.startAnimation(\"turnmarker\");\n                }\n            }\n            tile.renderable = isVisible(tile);\n        }\n    }\n});\n\nHooks.on('updateCombat', async (combat, update) => {\n    // Clear out any leftovers, there seems to be a buggy instance where updateCombat is fired, when combat isn't\n    // started nor, is a turn changed\n    if (!combat.started) {\n        await Marker.deleteStartMarker();\n    }\n    // SWADE has a special initiative\n    if (game.system.id != \"swade\") {\n        handleCombatUpdate(combat, update);\n    }\n});\n\n// For SWADE, need to reget active player after each round, but no better hook is fired after initiative shuffle\nHooks.on(\"renderCombatTracker\", async (combatTracker, update) => {\n    console.log(combatTracker);\n    if (game.system.id == \"swade\") {\n        handleCombatUpdate(combatTracker.combat, update)\n    }\n});\n\nHooks.on('deleteCombat', async () => {\n    if (game.user.isGM) {\n        await Marker.clearAllMarkers();\n    }\n    MarkerAnimation.stopAllAnimation();\n});\n\nHooks.on('updateToken', async (scene, updateToken, updateData) => {\n    /*\n    Moving preUpdateToken logic here, since pre hooks induce race conditions\n     */\n\n    // Do onDeck first, so current token will have higher Z-index\n    let deckTile = canvas.tiles.placeables.find(t => t.data.flags.deckMarker == true);\n    if (deckTile) {\n        if ((updateData.x || updateData.y || updateData.width || updateData.height || updateData.hidden) &&\n            (game && game.combat) &&\n            game.user.isGM && game.combat) {\n            let currentTurn = game.combat.turn;\n            let nextTurn = currentTurn + 1;\n            if (nextTurn >= game.combat.turns.length) {\n                nextTurn = 0;\n            }\n            let nextToken = game.combat.turns[nextTurn].token;\n            await Marker.moveMarkerToToken(nextToken._id, deckTile.id, \"deckmarker\");\n            deckTile.zIndex = Math.max(...canvas.tiles.placeables.map(o => o.zIndex)) + 1;\n            deckTile.parent.sortChildren();\n        }\n    }\n\n\n    let tile = canvas.tiles.placeables.find(t => t.data.flags.turnMarker == true);\n    if (tile) {\n        if ((updateData.x || updateData.y || updateData.width || updateData.height || updateData.hidden) &&\n            (game && game.combat && game.combat.combatant && game.combat.combatant.tokenId == updateToken._id) &&\n            game.user.isGM && game.combat) {\n            await Marker.moveMarkerToToken(updateToken._id, tile.id, \"turnmarker\");\n            tile.zIndex = Math.max(...canvas.tiles.placeables.map(o => o.zIndex)) + 1;\n            tile.parent.sortChildren();\n        }\n    }\n});\n\nfunction isVisible(tile) {\n    if (tile.data.hidden) {\n        return game.user.isGM;\n    }\n\n    if (!canvas.sight.tokenVision) {\n        return true;\n    }\n\n    if (tile._controlled) {\n        return true;\n    }\n\n    const combatant = canvas.tokens.placeables.find(t => t.id === game.combat.combatant.tokenId);\n\n    if (!combatant || combatant.data.hidden) {\n        return game.user.isGM;\n    }\n\n    if (combatant._controlled) {\n        return true;\n    }\n\n    let marker_type = \"turnmarker\";\n    if (tile.data.flags.startMarker) {\n        marker_type = \"startmarker\";\n    } else if (tile.data.flags.deckMarker) {\n        marker_type = \"deckmarker\";\n    }\n\n    const ratio = Settings.getRatio(marker_type);\n    const w = tile.data.width / ratio;\n    const h = tile.data.height / ratio;\n    const tolerance = Math.min(w, h) / 4;\n\n    return canvas.sight.testVisibility(tile.center, {tolerance, object: tile});\n}\n\nasync function createCombatDeckMarker(combat, nextTurn) {\n    if (Settings.getDeckPlayersOnly()) {\n        if (combat.turns[nextTurn].actor.hasPlayerOwner) {\n            await Marker.placeOnDeckMarker(combat.turns[nextTurn].token._id).then(function () {\n                if (Settings.getShouldAnimate(\"deckmarker\")) {\n                    MarkerAnimation.startAnimation(\"deckmarker\");\n                }\n            });\n        } else {\n            await Marker.deleteOnDeckMarker();\n        }\n    } else {\n        await Marker.placeOnDeckMarker(combat.turns[nextTurn].token._id).then(function () {\n                if (Settings.getShouldAnimate(\"deckmarker\")) {\n                    MarkerAnimation.startAnimation(\"deckmarker\");\n                }\n        });\n    }\n}\n\nasync function handleCombatUpdate(combat, update) {\n    if (combat.combatant) {\n        let nextTurn = getNextTurn(combat);\n        if (update && lastTurn != combat.combatant._id && game.user.isGM && game.userId == firstGM()) {\n            lastTurn = combat.combatant._id;\n            if (combat && combat.combatant && combat.started) {\n                await Marker.placeStartMarker(combat.combatant.token._id);\n                createCombatDeckMarker(combat, nextTurn);\n                let tile = canvas.tiles.placeables.find(t => t.data.flags.turnMarker == true);\n                await Marker.placeTurnMarker(combat.combatant.token._id, (tile && tile.id) || undefined);\n                if (Settings.shouldAnnounceTurns() && !combat.combatant.hidden) {\n                    switch (Settings.getAnnounceActors()) {\n                        case 0:\n                            Chatter.sendTurnMessage(combat.combatant);\n                            break;\n                        case 1:\n                            if (combat.combatant.actor.hasPlayerOwner) {\n                                Chatter.sendTurnMessage(combat.combatant);\n                            }\n                            break;\n                        case 2:\n                            if (!combat.combatant.actor.hasPlayerOwner) {\n                                Chatter.sendTurnMessage(combat.combatant);\n                            }\n                            break;\n                        case 3:\n                            Chatter.sendTurnMessage(combat.combatant, true);\n                    }\n                }\n            }\n        }\n    }\n}\n\nHooks.on('updateTile', (entity, data, options, userId) => {\n    if (data.flags.turnMarker || data.flags.startMarker || data.flags.deckMarker) {\n        const tile = canvas.tiles.placeables.find(t => t.id === data._id);\n        if (tile) {\n            tile.renderable = isVisible(tile);\n        }\n    }\n});\n\nHooks.on('sightRefresh', () => {\n    for (const tile of canvas.tiles.placeables) {\n        if (tile.data.flags.turnMarker || tile.data.flags.startMarker || tile.data.flags.deckMarker) {\n            tile.renderable = isVisible(tile);\n        }\n    }\n});\n\nHooks.on('pauseGame', (isPaused) => {\n    if (!isPaused) {\n        if (Settings.getShouldAnimate(\"turnmarker\") && canvas.tiles.placeables.find(t => t.data.flags.turnMarker == true)) {\n            MarkerAnimation.startAnimation(\"turnmarker\");\n        }\n        if (Settings.getShouldAnimate(\"deckmarker\") && canvas.tiles.placeables.find(t => t.data.flags.deckMarker == true)) {\n            MarkerAnimation.startAnimation(\"deckmarker\");\n        }\n    } else {\n        MarkerAnimation.stopAllAnimation();\n    }\n});\n","import { Settings } from './settings.js';\n\nexport function renderUpdateWindow() {\n    const module = game.modules.get(\"turnmarker\");\n\n    if (!isNewerVersion(module.data.version, Settings.getVersion()))\n        return;\n\n    class UpdateWindow extends Application {\n        static get defaultOptions() {\n            return mergeObject(super.defaultOptions, {\n                template: `modules/${module.id}/templates/updateWindow.html`,\n                resizable: false,\n                width: 500,\n                height: 600,\n                classes: [\"updateWindow\"],\n                title: `${module.data.title} - Updated`\n            });\n        }\n\n        getData() {\n            return {\n                version: module.data.version\n            };\n        }\n\n        activateListeners(html) {\n            super.activateListeners(html);\n\n            html.find('.show-again').on('change', ev => {\n                Settings.setVersion(ev.currentTarget.checked ? module.data.version : oldVersion);\n            });\n        }\n    }\n\n    new UpdateWindow().render(true);\n}","\n/**\n * The name of the module\n */\nexport const modName = 'turnmarker';\n\n/*** Flag Info */\nexport const FlagScope = 'turnmarker';\nexport const Flags = {\n    startMarkerPlaced: 'startMarkerPlaced'\n};\n\n/** Socket Info */\nexport const socketName = 'module.turnmarker';\nexport const socketAction = {\n    placeStartMarker: 0\n};\n\n/**\n * Returns a token object from the canvas based on the ID value\n * @param {String} tokenId - The ID of the token to look for\n */\nexport function findTokenById(tokenId) {\n    return canvas.tokens.ownedTokens.find(t => t.id == tokenId);\n}\n\n/**\n * Returns the ID of the first user logged in as GM.\n * Use for actions that need to be done by a GM but by only 1 GM\n */\nexport function firstGM() {\n    for (let user of game.users.entities) {\n        if (user.data.role >= 4 && user.active) {\n            return user.data._id;\n        }\n    }\n    return undefined;\n}\n\n/**\n * Returns the index of the nextTurn\n * @param {Object} combat - combat object from foundry\n */\nexport function getNextTurn(combat){\n    let currentTurn = combat.turn;\n    let nextTurn = currentTurn + 1;\n    if (nextTurn >= combat.turns.length) {\n        nextTurn = 0;\n    }\n    return nextTurn;\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/scripts/turnmarker.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}